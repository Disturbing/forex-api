# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Conversion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, date: str=None, from_iso: str=None, to_iso: str=None, from_amt: float=None, to_amt: float=None):  # noqa: E501
        """Conversion - a model defined in Swagger

        :param date: The date of this Conversion.  # noqa: E501
        :type date: str
        :param from_iso: The from_iso of this Conversion.  # noqa: E501
        :type from_iso: str
        :param to_iso: The to_iso of this Conversion.  # noqa: E501
        :type to_iso: str
        :param from_amt: The from_amt of this Conversion.  # noqa: E501
        :type from_amt: float
        :param to_amt: The to_amt of this Conversion.  # noqa: E501
        :type to_amt: float
        """
        self.swagger_types = {
            'date': str,
            'from_iso': str,
            'to_iso': str,
            'from_amt': float,
            'to_amt': float
        }

        self.attribute_map = {
            'date': 'date',
            'from_iso': 'from_iso',
            'to_iso': 'to_iso',
            'from_amt': 'from_amt',
            'to_amt': 'to_amt'
        }

        self._date = date
        self._from_iso = from_iso
        self._to_iso = to_iso
        self._from_amt = from_amt
        self._to_amt = to_amt

    @classmethod
    def from_dict(cls, dikt) -> 'Conversion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Conversion of this Conversion.  # noqa: E501
        :rtype: Conversion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date(self) -> str:
        """Gets the date of this Conversion.

        YYYY-MM-DD format of date the conversion data is based off of  # noqa: E501

        :return: The date of this Conversion.
        :rtype: str
        """
        return self._date

    @date.setter
    def date(self, date: str):
        """Sets the date of this Conversion.

        YYYY-MM-DD format of date the conversion data is based off of  # noqa: E501

        :param date: The date of this Conversion.
        :type date: str
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")  # noqa: E501

        self._date = date

    @property
    def from_iso(self) -> str:
        """Gets the from_iso of this Conversion.

        Three letter ISO 4217 alphabetic code for the currency that's being converted from  # noqa: E501

        :return: The from_iso of this Conversion.
        :rtype: str
        """
        return self._from_iso

    @from_iso.setter
    def from_iso(self, from_iso: str):
        """Sets the from_iso of this Conversion.

        Three letter ISO 4217 alphabetic code for the currency that's being converted from  # noqa: E501

        :param from_iso: The from_iso of this Conversion.
        :type from_iso: str
        """
        if from_iso is None:
            raise ValueError("Invalid value for `from_iso`, must not be `None`")  # noqa: E501

        self._from_iso = from_iso

    @property
    def to_iso(self) -> str:
        """Gets the to_iso of this Conversion.

        Three letter ISO 4217 alphabetic code for the currency that's being converted to  # noqa: E501

        :return: The to_iso of this Conversion.
        :rtype: str
        """
        return self._to_iso

    @to_iso.setter
    def to_iso(self, to_iso: str):
        """Sets the to_iso of this Conversion.

        Three letter ISO 4217 alphabetic code for the currency that's being converted to  # noqa: E501

        :param to_iso: The to_iso of this Conversion.
        :type to_iso: str
        """
        if to_iso is None:
            raise ValueError("Invalid value for `to_iso`, must not be `None`")  # noqa: E501

        self._to_iso = to_iso

    @property
    def from_amt(self) -> float:
        """Gets the from_amt of this Conversion.

        the amount of from_iso being converted  # noqa: E501

        :return: The from_amt of this Conversion.
        :rtype: float
        """
        return self._from_amt

    @from_amt.setter
    def from_amt(self, from_amt: float):
        """Sets the from_amt of this Conversion.

        the amount of from_iso being converted  # noqa: E501

        :param from_amt: The from_amt of this Conversion.
        :type from_amt: float
        """
        if from_amt is None:
            raise ValueError("Invalid value for `from_amt`, must not be `None`")  # noqa: E501

        self._from_amt = from_amt

    @property
    def to_amt(self) -> float:
        """Gets the to_amt of this Conversion.

        the amount of to_iso that the amount of from_iso converts to  # noqa: E501

        :return: The to_amt of this Conversion.
        :rtype: float
        """
        return self._to_amt

    @to_amt.setter
    def to_amt(self, to_amt: float):
        """Sets the to_amt of this Conversion.

        the amount of to_iso that the amount of from_iso converts to  # noqa: E501

        :param to_amt: The to_amt of this Conversion.
        :type to_amt: float
        """
        if to_amt is None:
            raise ValueError("Invalid value for `to_amt`, must not be `None`")  # noqa: E501

        self._to_amt = to_amt
